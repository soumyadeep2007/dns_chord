ID = 0
PROCESS_ID = 1


class Node(process):
    def setup(ip, m, predecessor, successor):
        self._id = self._calculate_id(ip, self._m)
        self._m = m
        self._predecessor = predecessor
        self._successor = successor
        self._finger = []  # 0th entry is blank

    # will either return
    def find_successor(id):
        if id <= self._successor[ID] or id <= ((1 << self._m) + id):
            return self._successor
        else:
            cpn = self.closest_preceding_node(id)
            send(('find_successor', id), to=cpn[PROCESS_ID])
            output('Sent find_successor query to: ', cpn)

    def closest_preceding_node(id):
        for i in range(self._m, 0, -1):
            if self._finger[i] < id or self._finger[i] < ((1 << self._m) + id):
                return self._finger[i]

    def _calculate_id(key, m):
        self._id = hash(key) % (1 << m)

    def _in_range(s, e, id):  # id in range (s, e]?
        if id < s:
            id += ((1 << self._m) - 1)
        if e < s:
            e += ((1 << self._m) - 1)
        return (id > s and id <= e)

