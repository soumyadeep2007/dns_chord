import time
ID = 0
PROCESS_ID = 1
IP = 2


class Node(process):
    def setup(node_desc, m, predecessor, successor, finger, records, kde):
        self._node_desc = node_desc
        self._m = m
        self._predecessor = predecessor
        self._successor = successor
        self._finger = finger
        self._records = records
        self._kde = kde

    def run():
        output('{node} is up: pred={p}, succ={s}, finger={f}, records={r}'
               .format(node=self._node_desc, p=self._predecessor,
                       s=self._successor, f=self._finger, r=list(self._records.items())))
        await(False)

    def receive(msg=('get', query)):
        sleepTime = self._kde.sample(1)
        # time.sleep(sleepTime[0] / 1000)
        query['sleepTime'] += sleepTime[0] / 2000
        query['hops'] += 1
        query['hops_name_list'].append(self._node_desc[2])
        send(('result', query, self._records.get(query['id'], None), self._node_desc), to=query['client'])
        output('{node} sent result of query = {query} to: {client}'
               .format(node=self._node_desc, query=query, client=query['client']))

    def receive(msg=('find_successor', query)):
        sleepTime = self._kde.sample(1)
        query['sleepTime'] += sleepTime[0] / 2000
        query['hops'] += 1
        query['hops_name_list'].append(self._node_desc[2])
        if self._in_range(self._node_desc[ID], self._successor[ID], query['id']):
            node = self._successor
            send(('successor', query, node), to=query['client'])
            output('{node} sent successor={successor} for query={query} to: {client}'
                   .format(node=self._node_desc, successor=node, query=query, client=query['client']))
        else:
            node = self.closest_preceding_node(query['id'])
            send(('find_successor', query), to=node[PROCESS_ID])
            output('{node} delegated find_successor for query={query} to: {delegatee}'
                   .format(node=self._node_desc, query=query, delegatee=node))

    def closest_preceding_node(id):
        for i in range(self._m - 1, -1, -1):
            if self._in_range(self._node_desc[ID], id, self._finger[i][ID]):
                return self._finger[i]

    def _in_range(s, e, id):  # id in range (s, e]?
        if id < s:
            id += ((1 << self._m) - 1)
        if e < s:
            e += ((1 << self._m) - 1)
        return (id > s and id <= e)
